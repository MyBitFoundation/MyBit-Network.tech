"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var ERC721Full = exports.ERC721Full = 
{
  "contractName": "ERC721Full",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        },
        {
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        },
        {
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "symbol",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    }
  ],
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200110438038062001104833981016040528051602082015190820191018181620000697f01ffc9a7000000000000000000000000000000000000000000000000000000006401000000006200013b810204565b6200009d7f80ac58cd000000000000000000000000000000000000000000000000000000006401000000006200013b810204565b620000d17f780e9d63000000000000000000000000000000000000000000000000000000006401000000006200013b810204565b8151620000e6906009906020850190620001a8565b508051620000fc90600a906020840190620001a8565b50620001317f5b5e139f000000000000000000000000000000000000000000000000000000006401000000006200013b810204565b505050506200024d565b7fffffffff0000000000000000000000000000000000000000000000000000000080821614156200016b57600080fd5b7fffffffff00000000000000000000000000000000000000000000000000000000166000908152602081905260409020805460ff19166001179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001eb57805160ff19168380011785556200021b565b828001600101855582156200021b579182015b828111156200021b578251825591602001919060010190620001fe565b50620002299291506200022d565b5090565b6200024a91905b8082111562000229576000815560010162000234565b90565b610ea7806200025d6000396000f3006080604052600436106100e55763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301ffc9a781146100ea57806306fdde0314610135578063081812fc146101bf578063095ea7b3146101f357806318160ddd1461021957806323b872dd146102405780632f745c591461026a57806342842e0e1461028e5780634f6ccce7146102b85780636352211e146102d057806370a08231146102e857806395d89b4114610309578063a22cb4651461031e578063b88d4fde14610344578063c87b56dd146103b3578063e985e9c5146103cb575b600080fd5b3480156100f657600080fd5b506101217bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19600435166103f2565b604080519115158252519081900360200190f35b34801561014157600080fd5b5061014a610426565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561018457818101518382015260200161016c565b50505050905090810190601f1680156101b15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101cb57600080fd5b506101d76004356104bd565b60408051600160a060020a039092168252519081900360200190f35b3480156101ff57600080fd5b50610217600160a060020a03600435166024356104ef565b005b34801561022557600080fd5b5061022e6105a5565b60408051918252519081900360200190f35b34801561024c57600080fd5b50610217600160a060020a03600435811690602435166044356105ab565b34801561027657600080fd5b5061022e600160a060020a0360043516602435610639565b34801561029a57600080fd5b50610217600160a060020a0360043581169060243516604435610686565b3480156102c457600080fd5b5061022e6004356106a7565b3480156102dc57600080fd5b506101d76004356106dc565b3480156102f457600080fd5b5061022e600160a060020a0360043516610706565b34801561031557600080fd5b5061014a610739565b34801561032a57600080fd5b50610217600160a060020a0360043516602435151561079a565b34801561035057600080fd5b50604080516020601f60643560048181013592830184900484028501840190955281845261021794600160a060020a03813581169560248035909216956044359536956084940191819084018382808284375094975061081e9650505050505050565b3480156103bf57600080fd5b5061014a600435610846565b3480156103d757600080fd5b50610121600160a060020a03600435811690602435166108fb565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191660009081526020819052604090205460ff1690565b60098054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104b25780601f10610487576101008083540402835291602001916104b2565b820191906000526020600020905b81548152906001019060200180831161049557829003601f168201915b505050505090505b90565b60006104c882610929565b15156104d357600080fd5b50600090815260026020526040902054600160a060020a031690565b60006104fa826106dc565b9050600160a060020a03838116908216141561051557600080fd5b33600160a060020a0382161480610531575061053181336108fb565b151561053c57600080fd5b600082815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b60075490565b6105b53382610946565b15156105c057600080fd5b600160a060020a03821615156105d557600080fd5b6105df83826109a5565b6105e98382610a16565b6105f38282610b1d565b8082600160a060020a031684600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b600061064483610706565b821061064f57600080fd5b600160a060020a038316600090815260056020526040902080548390811061067357fe5b9060005260206000200154905092915050565b6106a2838383602060405190810160405280600081525061081e565b505050565b60006106b16105a5565b82106106bc57600080fd5b60078054839081106106ca57fe5b90600052602060002001549050919050565b600081815260016020526040812054600160a060020a031680151561070057600080fd5b92915050565b6000600160a060020a038216151561071d57600080fd5b50600160a060020a031660009081526003602052604090205490565b600a8054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104b25780601f10610487576101008083540402835291602001916104b2565b600160a060020a0382163314156107b057600080fd5b336000818152600460209081526040808320600160a060020a03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b6108298484846105ab565b61083584848484610b66565b151561084057600080fd5b50505050565b606061085182610929565b151561085c57600080fd5b6000828152600b602090815260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845290918301828280156108ef5780601f106108c4576101008083540402835291602001916108ef565b820191906000526020600020905b8154815290600101906020018083116108d257829003601f168201915b50505050509050919050565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205460ff1690565b600090815260016020526040902054600160a060020a0316151590565b600080610952836106dc565b905080600160a060020a031684600160a060020a0316148061098d575083600160a060020a0316610982846104bd565b600160a060020a0316145b8061099d575061099d81856108fb565b949350505050565b81600160a060020a03166109b8826106dc565b600160a060020a0316146109cb57600080fd5b600081815260026020526040902054600160a060020a031615610a12576000818152600260205260409020805473ffffffffffffffffffffffffffffffffffffffff191690555b5050565b6000806000610a258585610ce8565b600084815260066020908152604080832054600160a060020a0389168452600590925290912054909350610a6090600163ffffffff610d7e16565b600160a060020a038616600090815260056020526040902080549193509083908110610a8857fe5b90600052602060002001549050806005600087600160a060020a0316600160a060020a0316815260200190815260200160002084815481101515610ac857fe5b6000918252602080832090910192909255600160a060020a0387168152600590915260409020805490610aff906000198301610e3e565b50600093845260066020526040808520859055908452909220555050565b6000610b298383610d90565b50600160a060020a039091166000908152600560209081526040808320805460018101825590845282842081018590559383526006909152902055565b600080610b7b85600160a060020a0316610e20565b1515610b8a5760019150610cdf565b6040517f150b7a020000000000000000000000000000000000000000000000000000000081523360048201818152600160a060020a03898116602485015260448401889052608060648501908152875160848601528751918a169463150b7a0294938c938b938b93909160a490910190602085019080838360005b83811015610c1d578181015183820152602001610c05565b50505050905090810190601f168015610c4a5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015610c6c57600080fd5b505af1158015610c80573d6000803e3d6000fd5b505050506040513d6020811015610c9657600080fd5b50517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1981167f150b7a020000000000000000000000000000000000000000000000000000000014925090505b50949350505050565b81600160a060020a0316610cfb826106dc565b600160a060020a031614610d0e57600080fd5b600160a060020a038216600090815260036020526040902054610d3890600163ffffffff610d7e16565b600160a060020a03909216600090815260036020908152604080832094909455918152600190915220805473ffffffffffffffffffffffffffffffffffffffff19169055565b600082821115610d8a57fe5b50900390565b600081815260016020526040902054600160a060020a031615610db257600080fd5b6000818152600160208181526040808420805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0388169081179091558452600390915290912054610e0091610e28565b600160a060020a0390921660009081526003602052604090209190915550565b6000903b1190565b600082820183811015610e3757fe5b9392505050565b8154818355818111156106a2576000838152602090206106a29181019083016104ba91905b80821115610e775760008155600101610e63565b50905600a165627a7a723058201057b371c834b1cdc8dc2c1bafdebe489b94601653df9aa0471cae614e846e660029",
  "deployedBytecode": "0x6080604052600436106100e55763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301ffc9a781146100ea57806306fdde0314610135578063081812fc146101bf578063095ea7b3146101f357806318160ddd1461021957806323b872dd146102405780632f745c591461026a57806342842e0e1461028e5780634f6ccce7146102b85780636352211e146102d057806370a08231146102e857806395d89b4114610309578063a22cb4651461031e578063b88d4fde14610344578063c87b56dd146103b3578063e985e9c5146103cb575b600080fd5b3480156100f657600080fd5b506101217bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19600435166103f2565b604080519115158252519081900360200190f35b34801561014157600080fd5b5061014a610426565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561018457818101518382015260200161016c565b50505050905090810190601f1680156101b15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101cb57600080fd5b506101d76004356104bd565b60408051600160a060020a039092168252519081900360200190f35b3480156101ff57600080fd5b50610217600160a060020a03600435166024356104ef565b005b34801561022557600080fd5b5061022e6105a5565b60408051918252519081900360200190f35b34801561024c57600080fd5b50610217600160a060020a03600435811690602435166044356105ab565b34801561027657600080fd5b5061022e600160a060020a0360043516602435610639565b34801561029a57600080fd5b50610217600160a060020a0360043581169060243516604435610686565b3480156102c457600080fd5b5061022e6004356106a7565b3480156102dc57600080fd5b506101d76004356106dc565b3480156102f457600080fd5b5061022e600160a060020a0360043516610706565b34801561031557600080fd5b5061014a610739565b34801561032a57600080fd5b50610217600160a060020a0360043516602435151561079a565b34801561035057600080fd5b50604080516020601f60643560048181013592830184900484028501840190955281845261021794600160a060020a03813581169560248035909216956044359536956084940191819084018382808284375094975061081e9650505050505050565b3480156103bf57600080fd5b5061014a600435610846565b3480156103d757600080fd5b50610121600160a060020a03600435811690602435166108fb565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191660009081526020819052604090205460ff1690565b60098054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104b25780601f10610487576101008083540402835291602001916104b2565b820191906000526020600020905b81548152906001019060200180831161049557829003601f168201915b505050505090505b90565b60006104c882610929565b15156104d357600080fd5b50600090815260026020526040902054600160a060020a031690565b60006104fa826106dc565b9050600160a060020a03838116908216141561051557600080fd5b33600160a060020a0382161480610531575061053181336108fb565b151561053c57600080fd5b600082815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b60075490565b6105b53382610946565b15156105c057600080fd5b600160a060020a03821615156105d557600080fd5b6105df83826109a5565b6105e98382610a16565b6105f38282610b1d565b8082600160a060020a031684600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b600061064483610706565b821061064f57600080fd5b600160a060020a038316600090815260056020526040902080548390811061067357fe5b9060005260206000200154905092915050565b6106a2838383602060405190810160405280600081525061081e565b505050565b60006106b16105a5565b82106106bc57600080fd5b60078054839081106106ca57fe5b90600052602060002001549050919050565b600081815260016020526040812054600160a060020a031680151561070057600080fd5b92915050565b6000600160a060020a038216151561071d57600080fd5b50600160a060020a031660009081526003602052604090205490565b600a8054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104b25780601f10610487576101008083540402835291602001916104b2565b600160a060020a0382163314156107b057600080fd5b336000818152600460209081526040808320600160a060020a03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b6108298484846105ab565b61083584848484610b66565b151561084057600080fd5b50505050565b606061085182610929565b151561085c57600080fd5b6000828152600b602090815260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845290918301828280156108ef5780601f106108c4576101008083540402835291602001916108ef565b820191906000526020600020905b8154815290600101906020018083116108d257829003601f168201915b50505050509050919050565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205460ff1690565b600090815260016020526040902054600160a060020a0316151590565b600080610952836106dc565b905080600160a060020a031684600160a060020a0316148061098d575083600160a060020a0316610982846104bd565b600160a060020a0316145b8061099d575061099d81856108fb565b949350505050565b81600160a060020a03166109b8826106dc565b600160a060020a0316146109cb57600080fd5b600081815260026020526040902054600160a060020a031615610a12576000818152600260205260409020805473ffffffffffffffffffffffffffffffffffffffff191690555b5050565b6000806000610a258585610ce8565b600084815260066020908152604080832054600160a060020a0389168452600590925290912054909350610a6090600163ffffffff610d7e16565b600160a060020a038616600090815260056020526040902080549193509083908110610a8857fe5b90600052602060002001549050806005600087600160a060020a0316600160a060020a0316815260200190815260200160002084815481101515610ac857fe5b6000918252602080832090910192909255600160a060020a0387168152600590915260409020805490610aff906000198301610e3e565b50600093845260066020526040808520859055908452909220555050565b6000610b298383610d90565b50600160a060020a039091166000908152600560209081526040808320805460018101825590845282842081018590559383526006909152902055565b600080610b7b85600160a060020a0316610e20565b1515610b8a5760019150610cdf565b6040517f150b7a020000000000000000000000000000000000000000000000000000000081523360048201818152600160a060020a03898116602485015260448401889052608060648501908152875160848601528751918a169463150b7a0294938c938b938b93909160a490910190602085019080838360005b83811015610c1d578181015183820152602001610c05565b50505050905090810190601f168015610c4a5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015610c6c57600080fd5b505af1158015610c80573d6000803e3d6000fd5b505050506040513d6020811015610c9657600080fd5b50517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1981167f150b7a020000000000000000000000000000000000000000000000000000000014925090505b50949350505050565b81600160a060020a0316610cfb826106dc565b600160a060020a031614610d0e57600080fd5b600160a060020a038216600090815260036020526040902054610d3890600163ffffffff610d7e16565b600160a060020a03909216600090815260036020908152604080832094909455918152600190915220805473ffffffffffffffffffffffffffffffffffffffff19169055565b600082821115610d8a57fe5b50900390565b600081815260016020526040902054600160a060020a031615610db257600080fd5b6000818152600160208181526040808420805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0388169081179091558452600390915290912054610e0091610e28565b600160a060020a0390921660009081526003602052604090209190915550565b6000903b1190565b600082820183811015610e3757fe5b9392505050565b8154818355818111156106a2576000838152602090206106a29181019083016104ba91905b80821115610e775760008155600101610e63565b50905600a165627a7a723058201057b371c834b1cdc8dc2c1bafdebe489b94601653df9aa0471cae614e846e660029",
  "sourceMap": "405:151:110:-;;;475:79;8:9:-1;5:2;;;30:1;27;20:12;5:2;475:79:110;;;;;;;;;;;;;;;;;;;;;;;;;;;640:39:24;659:19;640:18;;;;:39;:::i;:::-;1906::107;1925:19;1906:18;;;;:39;:::i;:::-;1235:49:109;1254:29;1235:18;;;;:49;:::i;:::-;718:12:111;;;;:5;;:12;;;;;:::i;:::-;-1:-1:-1;740:16:111;;;;:7;;:16;;;;;:::i;:::-;-1:-1:-1;844:46:111;863:26;844:18;;;;:46;:::i;:::-;660:237;;475:79:110;;405:151;;989:158:24;1064:25;;;;;;1056:34;;;;;;1100:33;;:20;:33;;;;;;;;;;:40;;-1:-1:-1;;1100:40:24;1136:4;1100:40;;;989:158::o;405:151:110:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;405:151:110;;;-1:-1:-1;405:151:110;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;",
  "deployedSourceMap": "405:151:110:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;777:133:24;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;777:133:24;-1:-1:-1;;777:133:24;;;;;;;;;;;;;;;;;;;;;;;1001:76:111;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1001:76:111;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;1001:76:111;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3704:151:107;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;3704:151:107;;;;;;;;;-1:-1:-1;;;;;3704:151:107;;;;;;;;;;;;;;3127:292;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;3127:292:107;-1:-1:-1;;;;;3127:292:107;;;;;;;;;1998:94:109;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1998:94:109;;;;;;;;;;;;;;;;;;;;5259:330:107;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;5259:330:107;-1:-1:-1;;;;;5259:330:107;;;;;;;;;;;;1664:182:109;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1664:182:109;-1:-1:-1;;;;;1664:182:109;;;;;;;6228:181:107;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;6228:181:107;-1:-1:-1;;;;;6228:181:107;;;;;;;;;;;;2429:148:109;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2429:148:109;;;;;2529:177:107;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2529:177:107;;;;;2155:150;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2155:150:107;-1:-1:-1;;;;;2155:150:107;;;;;1185:80:111;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1185:80:111;;;;4147:213:107;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;4147:213:107;-1:-1:-1;;;;;4147:213:107;;;;;;;;;7114:253;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;7114:253:107;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;7114:253:107;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7114:253:107;;-1:-1:-1;7114:253:107;;-1:-1:-1;;;;;;;7114:253:107;1464:144:111;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1464:144:111;;;;;4681:145:107;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;4681:145:107;-1:-1:-1;;;;;4681:145:107;;;;;;;;;;777:133:24;-1:-1:-1;;870:33:24;847:4;870:33;;;;;;;;;;;;;;777:133::o;1001:76:111:-;1065:5;1058:12;;;;;;;;-1:-1:-1;;1058:12:111;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1040:6;;1058:12;;1065:5;;1058:12;;1065:5;1058:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1001:76;;:::o;3704:151:107:-;3763:7;3790:16;3798:7;3790;:16::i;:::-;3782:25;;;;;;;;-1:-1:-1;3824:24:107;;;;:15;:24;;;;;;-1:-1:-1;;;;;3824:24:107;;3704:151::o;3127:292::-;3190:13;3206:16;3214:7;3206;:16::i;:::-;3190:32;-1:-1:-1;;;;;;3240:11:107;;;;;;;;3232:20;;;;;;3270:10;-1:-1:-1;;;;;3270:19:107;;;;:58;;;3293:35;3310:5;3317:10;3293:16;:35::i;:::-;3262:67;;;;;;;;3340:24;;;;:15;:24;;;;;;:29;;-1:-1:-1;;3340:29:107;-1:-1:-1;;;;;3340:29:107;;;;;;;;;3384:28;;3340:24;;3384:28;;;;;;;3127:292;;;:::o;1998:94:109:-;2068:10;:17;1998:94;:::o;5259:330:107:-;5349:39;5368:10;5380:7;5349:18;:39::i;:::-;5341:48;;;;;;;;-1:-1:-1;;;;;5407:16:107;;;;5399:25;;;;;;5435:29;5450:4;5456:7;5435:14;:29::i;:::-;5474:31;5491:4;5497:7;5474:16;:31::i;:::-;5515:24;5527:2;5531:7;5515:11;:24::i;:::-;5574:7;5570:2;-1:-1:-1;;;;;5555:27:107;5564:4;-1:-1:-1;;;;;5555:27:107;;;;;;;;;;;5259:330;;;:::o;1664:182:109:-;1744:7;1779:16;1789:5;1779:9;:16::i;:::-;1771:24;;1763:33;;;;;;-1:-1:-1;;;;;1813:19:109;;;;;;:12;:19;;;;;:26;;1833:5;;1813:26;;;;;;;;;;;;;;1806:33;;1664:182;;;;:::o;6228:181:107:-;6363:39;6380:4;6386:2;6390:7;6363:39;;;;;;;;;;;;;:16;:39::i;:::-;6228:181;;;:::o;2429:148:109:-;2487:7;2522:13;:11;:13::i;:::-;2514:21;;2506:30;;;;;;2553:10;:17;;2564:5;;2553:17;;;;;;;;;;;;;;2546:24;;2429:148;;;:::o;2529:177:107:-;2584:7;2619:20;;;:11;:20;;;;;;-1:-1:-1;;;;;2619:20:107;2657:19;;;2649:28;;;;;;2694:5;2529:177;-1:-1:-1;;2529:177:107:o;2155:150::-;2210:7;-1:-1:-1;;;;;2237:19:107;;;;2229:28;;;;;;-1:-1:-1;;;;;;2274:24:107;;;;;:17;:24;;;;;;;2155:150::o;1185:80:111:-;1251:7;1244:14;;;;;;;;-1:-1:-1;;1244:14:111;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1226:6;;1244:14;;1251:7;;1244:14;;1251:7;1244:14;;;;;;;;;;;;;;;;;;;;;;;;4147:213:107;-1:-1:-1;;;;;4226:16:107;;4232:10;4226:16;;4218:25;;;;;;4272:10;4253:30;;;;:18;:30;;;;;;;;-1:-1:-1;;;;;4253:34:107;;;;;;;;;;;;:45;;-1:-1:-1;;4253:45:107;;;;;;;;;;4313:40;;;;;;;4253:34;;4272:10;4313:40;;;;;;;;;;;4147:213;;:::o;7114:253::-;7213:31;7226:4;7232:2;7236:7;7213:12;:31::i;:::-;7311:48;7334:4;7340:2;7344:7;7353:5;7311:22;:48::i;:::-;7303:57;;;;;;;;7114:253;;;;:::o;1464:144:111:-;1522:6;1548:16;1556:7;1548;:16::i;:::-;1540:25;;;;;;;;1582:19;;;;:10;:19;;;;;;;;;1575:26;;;;;;-1:-1:-1;;1575:26:111;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1582:19;;1575:26;;1582:19;1575:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1464:144;;;:::o;4681:145:107:-;-1:-1:-1;;;;;4784:25:107;;;4761:4;4784:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;4681:145::o;7556:152::-;7613:4;7645:20;;;:11;:20;;;;;;-1:-1:-1;;;;;7645:20:107;7682:19;;;7556:152::o;8071:404::-;8156:4;8172:13;8188:16;8196:7;8188;:16::i;:::-;8172:32;;8391:5;-1:-1:-1;;;;;8380:16:107;:7;-1:-1:-1;;;;;8380:16:107;;:51;;;;8424:7;-1:-1:-1;;;;;8400:31:107;:20;8412:7;8400:11;:20::i;:::-;-1:-1:-1;;;;;8400:31:107;;8380:51;:87;;;;8435:32;8452:5;8459:7;8435:16;:32::i;:::-;8372:96;8071:404;-1:-1:-1;;;;8071:404:107:o;11859:230::-;11961:5;-1:-1:-1;;;;;11941:25:107;:16;11949:7;11941;:16::i;:::-;-1:-1:-1;;;;;11941:25:107;;11933:34;;;;;;12017:1;11981:24;;;:15;:24;;;;;;-1:-1:-1;;;;;11981:24:107;:38;11977:106;;12070:1;12035:24;;;:15;:24;;;;;:37;;-1:-1:-1;;12035:37:107;;;11977:106;11859:230;;:::o;3818:1078:109:-;4087:18;4144:22;4211:17;3894:37;3917:4;3923:7;3894:22;:37::i;:::-;4108:26;;;;:17;:26;;;;;;;;;-1:-1:-1;;;;;4169:18:109;;;;:12;:18;;;;;;:25;4108:26;;-1:-1:-1;4169:32:109;;4199:1;4169:32;:29;:32;:::i;:::-;-1:-1:-1;;;;;4231:18:109;;;;;;:12;:18;;;;;:34;;4144:57;;-1:-1:-1;4231:18:109;4144:57;;4231:34;;;;;;;;;;;;;;4211:54;;4309:9;4276:12;:18;4289:4;-1:-1:-1;;;;;4276:18:109;-1:-1:-1;;;;;4276:18:109;;;;;;;;;;;;4295:10;4276:30;;;;;;;;;;;;;;;;;;;;;:42;;;;-1:-1:-1;;;;;4404:18:109;;;;:12;:18;;;;;;:27;;;;;-1:-1:-1;;4404:27:109;;;:::i;:::-;-1:-1:-1;4837:1:109;4808:26;;;:17;:26;;;;;;:30;;;4848:28;;;;;;:41;-1:-1:-1;;3818:1078:109:o;3051:241::-;3160:14;3120:30;3138:2;3142:7;3120:17;:30::i;:::-;-1:-1:-1;;;;;;3177:16:109;;;;;;;:12;:16;;;;;;;;:23;;39:1:-1;23:18;;45:23;;3210:30:109;;;;;;;;;;;3250:26;;;:17;:26;;;;;:35;3051:241::o;11258:328:107:-;11364:4;11448:13;11385:15;:2;-1:-1:-1;;;;;11385:13:107;;:15::i;:::-;11384:16;11380:58;;;11423:4;11416:11;;;;11380:58;11464:70;;;;;11501:10;11464:70;;;;;;-1:-1:-1;;;;;11464:70:107;;;;;;;;;;;;;;;;;;;;;;;;;;;;:36;;;;;;11501:10;11513:4;;11519:7;;11528:5;;11464:70;;;;;;;;;;;;;;-1:-1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;11464:70:107;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11464:70:107;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;11464:70:107;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;11464:70:107;-1:-1:-1;;11552:26:107;;11562:16;11552:26;;-1:-1:-1;11464:70:107;-1:-1:-1;11258:328:107;;;;;;;;:::o;10510:225::-;10614:4;-1:-1:-1;;;;;10594:24:107;:16;10602:7;10594;:16::i;:::-;-1:-1:-1;;;;;10594:24:107;;10586:33;;;;;;-1:-1:-1;;;;;10655:23:107;;;;;;:17;:23;;;;;;:30;;10683:1;10655:30;:27;:30;:::i;:::-;-1:-1:-1;;;;;10629:23:107;;;;;;;:17;:23;;;;;;;;:56;;;;10695:20;;;:11;:20;;;;:33;;-1:-1:-1;;10695:33:107;;;10510:225::o;936:110:73:-;994:7;1016:6;;;;1009:14;;;;-1:-1:-1;1036:5:73;;;936:110::o;9774:216:107:-;9883:1;9851:20;;;:11;:20;;;;;;-1:-1:-1;;;;;9851:20:107;:34;9843:43;;;;;;9896:20;;;;:11;:20;;;;;;;;:25;;-1:-1:-1;;9896:25:107;-1:-1:-1;;;;;9896:25:107;;;;;;;;9955:21;;:17;:21;;;;;;;:28;;:25;:28::i;:::-;-1:-1:-1;;;;;9931:21:107;;;;;;;:17;:21;;;;;:52;;;;-1:-1:-1;9774:216:107:o;464:624:21:-;524:4;1035:20;;1073:8;;464:624::o;1101:129:73:-;1159:7;1186:5;;;1204:6;;;;1197:14;;;;1224:1;1101:129;-1:-1:-1;;;1101:129:73:o;405:151:110:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
  "source": "pragma solidity ^0.4.24;\n\nimport \"./ERC721.sol\";\nimport \"./ERC721Enumerable.sol\";\nimport \"./ERC721Metadata.sol\";\n\n/**\n * @title Full ERC721 Token\n * This implementation includes all the required and some optional functionality of the ERC721 standard\n * Moreover, it includes approve all functionality using operator terminology\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n */\ncontract ERC721Full is ERC721, ERC721Enumerable, ERC721Metadata {\n    constructor (string name, string symbol) ERC721Metadata(name, symbol) public {}\n}\n",
  "sourcePath": "/home/peter/Documents/Work/MyBit/MyBit-Network.tech/contracts/tokens/erc721/ERC721Full.sol",
  "ast": {
    "absolutePath": "/home/peter/Documents/Work/MyBit/MyBit-Network.tech/contracts/tokens/erc721/ERC721Full.sol",
    "exportedSymbols": {
      "ERC721Full": [
        34337
      ]
    },
    "id": 34338,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 34315,
        "literals": [
          "solidity",
          "^",
          "0.4",
          ".24"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:110"
      },
      {
        "absolutePath": "/home/peter/Documents/Work/MyBit/MyBit-Network.tech/contracts/tokens/erc721/ERC721.sol",
        "file": "./ERC721.sol",
        "id": 34316,
        "nodeType": "ImportDirective",
        "scope": 34338,
        "sourceUnit": 33991,
        "src": "26:22:110",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/peter/Documents/Work/MyBit/MyBit-Network.tech/contracts/tokens/erc721/ERC721Enumerable.sol",
        "file": "./ERC721Enumerable.sol",
        "id": 34317,
        "nodeType": "ImportDirective",
        "scope": 34338,
        "sourceUnit": 34314,
        "src": "49:32:110",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/peter/Documents/Work/MyBit/MyBit-Network.tech/contracts/tokens/erc721/ERC721Metadata.sol",
        "file": "./ERC721Metadata.sol",
        "id": 34318,
        "nodeType": "ImportDirective",
        "scope": 34338,
        "sourceUnit": 34465,
        "src": "82:30:110",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 34319,
              "name": "ERC721",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 33990,
              "src": "428:6:110",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721_$33990",
                "typeString": "contract ERC721"
              }
            },
            "id": 34320,
            "nodeType": "InheritanceSpecifier",
            "src": "428:6:110"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 34321,
              "name": "ERC721Enumerable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 34313,
              "src": "436:16:110",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721Enumerable_$34313",
                "typeString": "contract ERC721Enumerable"
              }
            },
            "id": 34322,
            "nodeType": "InheritanceSpecifier",
            "src": "436:16:110"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 34323,
              "name": "ERC721Metadata",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 34464,
              "src": "454:14:110",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721Metadata_$34464",
                "typeString": "contract ERC721Metadata"
              }
            },
            "id": 34324,
            "nodeType": "InheritanceSpecifier",
            "src": "454:14:110"
          }
        ],
        "contractDependencies": [
          8482,
          8629,
          33990,
          34313,
          34464,
          34734,
          34761,
          34796
        ],
        "contractKind": "contract",
        "documentation": "@title Full ERC721 Token\nThis implementation includes all the required and some optional functionality of the ERC721 standard\nMoreover, it includes approve all functionality using operator terminology\n@dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md",
        "fullyImplemented": true,
        "id": 34337,
        "linearizedBaseContracts": [
          34337,
          34464,
          34796,
          34313,
          34761,
          33990,
          34734,
          8482,
          8629
        ],
        "name": "ERC721Full",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 34335,
              "nodeType": "Block",
              "src": "552:2:110",
              "statements": []
            },
            "documentation": null,
            "id": 34336,
            "implemented": true,
            "isConstructor": true,
            "isDeclaredConst": false,
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "id": 34331,
                    "name": "name",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 34326,
                    "src": "531:4:110",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  {
                    "argumentTypes": null,
                    "id": 34332,
                    "name": "symbol",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 34328,
                    "src": "537:6:110",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  }
                ],
                "id": 34333,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 34330,
                  "name": "ERC721Metadata",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 34464,
                  "src": "516:14:110",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_ERC721Metadata_$34464_$",
                    "typeString": "type(contract ERC721Metadata)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "516:28:110"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 34329,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 34326,
                  "name": "name",
                  "nodeType": "VariableDeclaration",
                  "scope": 34336,
                  "src": "488:11:110",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 34325,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "488:6:110",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 34328,
                  "name": "symbol",
                  "nodeType": "VariableDeclaration",
                  "scope": 34336,
                  "src": "501:13:110",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 34327,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "501:6:110",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "487:28:110"
            },
            "payable": false,
            "returnParameters": {
              "id": 34334,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "552:0:110"
            },
            "scope": 34337,
            "src": "475:79:110",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 34338,
        "src": "405:151:110"
      }
    ],
    "src": "0:557:110"
  },
  "legacyAST": {
    "absolutePath": "/home/peter/Documents/Work/MyBit/MyBit-Network.tech/contracts/tokens/erc721/ERC721Full.sol",
    "exportedSymbols": {
      "ERC721Full": [
        34337
      ]
    },
    "id": 34338,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 34315,
        "literals": [
          "solidity",
          "^",
          "0.4",
          ".24"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:110"
      },
      {
        "absolutePath": "/home/peter/Documents/Work/MyBit/MyBit-Network.tech/contracts/tokens/erc721/ERC721.sol",
        "file": "./ERC721.sol",
        "id": 34316,
        "nodeType": "ImportDirective",
        "scope": 34338,
        "sourceUnit": 33991,
        "src": "26:22:110",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/peter/Documents/Work/MyBit/MyBit-Network.tech/contracts/tokens/erc721/ERC721Enumerable.sol",
        "file": "./ERC721Enumerable.sol",
        "id": 34317,
        "nodeType": "ImportDirective",
        "scope": 34338,
        "sourceUnit": 34314,
        "src": "49:32:110",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/peter/Documents/Work/MyBit/MyBit-Network.tech/contracts/tokens/erc721/ERC721Metadata.sol",
        "file": "./ERC721Metadata.sol",
        "id": 34318,
        "nodeType": "ImportDirective",
        "scope": 34338,
        "sourceUnit": 34465,
        "src": "82:30:110",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 34319,
              "name": "ERC721",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 33990,
              "src": "428:6:110",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721_$33990",
                "typeString": "contract ERC721"
              }
            },
            "id": 34320,
            "nodeType": "InheritanceSpecifier",
            "src": "428:6:110"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 34321,
              "name": "ERC721Enumerable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 34313,
              "src": "436:16:110",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721Enumerable_$34313",
                "typeString": "contract ERC721Enumerable"
              }
            },
            "id": 34322,
            "nodeType": "InheritanceSpecifier",
            "src": "436:16:110"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 34323,
              "name": "ERC721Metadata",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 34464,
              "src": "454:14:110",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721Metadata_$34464",
                "typeString": "contract ERC721Metadata"
              }
            },
            "id": 34324,
            "nodeType": "InheritanceSpecifier",
            "src": "454:14:110"
          }
        ],
        "contractDependencies": [
          8482,
          8629,
          33990,
          34313,
          34464,
          34734,
          34761,
          34796
        ],
        "contractKind": "contract",
        "documentation": "@title Full ERC721 Token\nThis implementation includes all the required and some optional functionality of the ERC721 standard\nMoreover, it includes approve all functionality using operator terminology\n@dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md",
        "fullyImplemented": true,
        "id": 34337,
        "linearizedBaseContracts": [
          34337,
          34464,
          34796,
          34313,
          34761,
          33990,
          34734,
          8482,
          8629
        ],
        "name": "ERC721Full",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 34335,
              "nodeType": "Block",
              "src": "552:2:110",
              "statements": []
            },
            "documentation": null,
            "id": 34336,
            "implemented": true,
            "isConstructor": true,
            "isDeclaredConst": false,
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "id": 34331,
                    "name": "name",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 34326,
                    "src": "531:4:110",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  {
                    "argumentTypes": null,
                    "id": 34332,
                    "name": "symbol",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 34328,
                    "src": "537:6:110",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  }
                ],
                "id": 34333,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 34330,
                  "name": "ERC721Metadata",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 34464,
                  "src": "516:14:110",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_ERC721Metadata_$34464_$",
                    "typeString": "type(contract ERC721Metadata)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "516:28:110"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 34329,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 34326,
                  "name": "name",
                  "nodeType": "VariableDeclaration",
                  "scope": 34336,
                  "src": "488:11:110",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 34325,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "488:6:110",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 34328,
                  "name": "symbol",
                  "nodeType": "VariableDeclaration",
                  "scope": 34336,
                  "src": "501:13:110",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 34327,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "501:6:110",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "487:28:110"
            },
            "payable": false,
            "returnParameters": {
              "id": 34334,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "552:0:110"
            },
            "scope": 34337,
            "src": "475:79:110",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 34338,
        "src": "405:151:110"
      }
    ],
    "src": "0:557:110"
  },
  "compiler": {
    "name": "solc",
    "version": "0.4.24+commit.e67f0147.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.1",
  "updatedAt": "2019-03-13T22:36:35.035Z",
  "devdoc": {
    "methods": {
      "approve(address,uint256)": {
        "details": "Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.",
        "params": {
          "to": "address to be approved for the given token ID",
          "tokenId": "uint256 ID of the token to be approved"
        }
      },
      "balanceOf(address)": {
        "details": "Gets the balance of the specified address",
        "params": {
          "owner": "address to query the balance of"
        },
        "return": "uint256 representing the amount owned by the passed address"
      },
      "getApproved(uint256)": {
        "details": "Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.",
        "params": {
          "tokenId": "uint256 ID of the token to query the approval of"
        },
        "return": "address currently approved for the given token ID"
      },
      "isApprovedForAll(address,address)": {
        "details": "Tells whether an operator is approved by a given owner",
        "params": {
          "operator": "operator address which you want to query the approval of",
          "owner": "owner address which you want to query the approval of"
        },
        "return": "bool whether the given operator is approved by the given owner"
      },
      "name()": {
        "details": "Gets the token name",
        "return": "string representing the token name"
      },
      "ownerOf(uint256)": {
        "details": "Gets the owner of the specified token ID",
        "params": {
          "tokenId": "uint256 ID of the token to query the owner of"
        },
        "return": "owner address currently marked as the owner of the given token ID"
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted.     * Requires the msg sender to be the owner, approved, or operator",
        "params": {
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted. Requires the msg sender to be the owner, approved, or operator",
        "params": {
          "_data": "bytes data to send along with a safe transfer check",
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf",
        "params": {
          "approved": "representing the status of the approval to be set",
          "to": "operator address to set the approval"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "implement supportsInterface(bytes4) using a lookup table"
      },
      "symbol()": {
        "details": "Gets the token symbol",
        "return": "string representing the token symbol"
      },
      "tokenByIndex(uint256)": {
        "details": "Gets the token ID at a given index of all the tokens in this contract Reverts if the index is greater or equal to the total number of tokens",
        "params": {
          "index": "uint256 representing the index to be accessed of the tokens list"
        },
        "return": "uint256 token ID at the given index of the tokens list"
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "Gets the token ID at a given index of the tokens list of the requested owner",
        "params": {
          "index": "uint256 representing the index to be accessed of the requested tokens list",
          "owner": "address owning the tokens list to be accessed"
        },
        "return": "uint256 token ID at the given index of the tokens list owned by the requested address"
      },
      "tokenURI(uint256)": {
        "details": "Returns an URI for a given token ID Throws if the token ID does not exist. May return an empty string.",
        "params": {
          "tokenId": "uint256 ID of the token to query"
        }
      },
      "totalSupply()": {
        "details": "Gets the total amount of tokens stored by the contract",
        "return": "uint256 representing the total amount of tokens"
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers the ownership of a given token ID to another address Usage of this method is discouraged, use `safeTransferFrom` whenever possible Requires the msg sender to be the owner, approved, or operator",
        "params": {
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      }
    },
    "title": "Full ERC721 Token This implementation includes all the required and some optional functionality of the ERC721 standard Moreover, it includes approve all functionality using operator terminology"
  },
  "userdoc": {
    "methods": {}
  }
}